[{"title":"我的第五篇博客","date":"2020-06-09T01:30:33.000Z","path":"2020/06/09/我的第五篇博客/","text":"","comments":true,"tags":[]},{"title":"我的第四篇博客","date":"2020-06-09T01:19:33.000Z","path":"2020/06/09/我的第四篇博客/","text":"","comments":true,"tags":[]},{"title":"我的第三篇博客","date":"2020-06-09T01:09:01.000Z","path":"2020/06/09/我的第三篇博客/","text":"适配的意义在不同设备上实现等比 相对单位em是相对字体大小来计算的，谷歌下1fontsize一般是16像素，所以此时1em=16pxrem相对于根元素的字体大小来计算的，根元素是html，计算方法同上vw 相对于视口宽度进行计算的，100vw=一个视口宽度。 1vw=视口宽度/100Vh 相对于视口高度进行计算，计算方法同上 适配方法rem适配—原理 一个元素在不同设备上的css像素的个数不一样 —实现 12345#test&#123; width: 8rem; height: 1rem; background: pink;&#125; 123456(function()&#123; var styleNode &#x3D; document.createElement(&quot;style&quot;);&#x2F;&#x2F;创建style标签节点 var w &#x3D; document.documentElement.clientWidth&#x2F;16;&#x2F;&#x2F;计算fontsize，这里获取了布局视口宽度 styleNode.innerHTML &#x3D; &quot;html&#123;font-size:&quot;+w+&quot;px!important&#125;&quot;;&#x2F;&#x2F;在style里设置html中的fontsize ocument.head.appendChild(styleNode);&#x2F;&#x2F;把标签节点插入到head标签里 &#125;)() —优缺点优点：可以使用完美视口（没有改变缩放系数）缺点：px到rem的转化特别麻烦（每次都要自己算） viewport适配将所有设备布局视口宽度设置为设计图宽度,方法是调整系统缩放倍数 12345#test&#123; width: 320px; height: 100px; background: pink;&#125; 123456(function()&#123; var targetW &#x3D; 640; var scale &#x3D; document.documentElement.clientWidth&#x2F;targetW; var meta &#x3D; document.querySelector(&quot;meta[name&#x3D;&#39;viewport&#39;]&quot;); meta.content&#x3D;&quot;initial-scale&#x3D;&quot;+scale+&quot;,minimum-scale&#x3D;&quot;+scale+&quot;,maximum-scale&#x3D;&quot;+scale+&quot;,user-scalable&#x3D;no&quot;; &#125;)() –原理： viewport适配方案中，每一个元素在不同设备上占据的css像素的个数是一样的。但是css像素和物理像素的比例是不一样的，等比的 –优缺点： 优点:所量即所得（只算一次） 缺点:没有使用完美视口（改变了缩放系数，不为1了）","comments":true,"tags":[{"name":"移动端适配","slug":"移动端适配","permalink":"https://zhoubb96.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/"}]},{"title":"我的第二篇博客","date":"2020-06-08T08:32:47.000Z","path":"2020/06/08/我的第二篇博客/","text":"APP的三种类型 web app，使用html5，需要向服务器请求资源，性能较慢但是现在有了提升，开发快，成本低，更新迭代快，会是将来的主流。 native app，原生应用，资源在本地，性能高。安卓使用java语言，ios使用objectC 混合app，结合性能与开发速度 关于适配的相关概念1. 屏幕 屏幕尺寸：屏幕对角线的长度，单位为英寸，1英寸=2.54厘米。 屏幕分辨率：屏幕的两个方向物理像素点数，单位px，1px=1像素点。1080*1920 屏幕密度：每英寸物理像素的个数 2. 像素 位图像素：图像的最小单位。一个位图像素对应一个物理像素就能完美清晰的展示（失真，锐化） 物理像素（设备像素）：设备呈现的最小单位，固定的。但是不同设备的一个物理像占据屏幕尺寸可能不一样，这就引出了等比的适配问题，现在屏幕分辨率高，所以物理像素多就导致了物理像素小。iphone6的物理像素为750px 设备独立像素：可以由程序员使用的虚拟像素，设备对接css像素的接口，只有css像素与设备独立像素挂钩 123456789101112131415161718192021一般会让css像素等于这个设备独立像素。iphone6的物理像素为375px* css像素：一个抽象单位，最终转换为物理像素（通过让css像素等于设备独立像素,然后利用像素比转换）。用来度量web页面的内容，web开发的最小单位 一个css像素最终占据多少个物理像素由屏幕特性以及用户的缩放行为决定决定，在像素比为2的屏幕一个css像素占据四个物理像素，* 像素比：物理像素&#x2F;设备独立像素 （是设备固有的特性） iPhone6的像素比为750&#x2F;375&#x3D;2，像素比是单个方向的，这里是切图要注意的 以一个3018的图片为例子，在像素比为1屏幕的就是30x18下，在像素比为2的屏幕就是60x36，这样就能 完美显示。### 3. 视口（视口宽度用的都是css像素，所以逻辑上是可变的）#### 3.1布局视口（决定网页布局）在PC端上，布局视口等于浏览器窗口的宽度。而在移动端上，由于要使为PC端浏览器设计的网站能够完全显示在移动端的小屏幕里，此时的布局视口会远大于移动设备的屏幕，就会出现滚动条。js获取布局视口尺寸： document.documentElement.clientWidth | document.body.clientWidth 12345布局视口的出现，在极大程度上帮助了桌面网站到移动设备上的转移。iphone6的布局视口是980css像素#### 3.2 视觉视口（决定用户可视内容）滚动条由视觉窗口决定。js获取视觉视口： window.innerWidth； 1234567一个css像素占据的物理像素的数量和视觉视口有很大关系，因为一个视觉视口包含的物理像素是固定的，但是包含的css像素个数会被缩放操作所影响。这个css像素个数就是视口宽度。#### 3.3 理想视口ideal viewport(理想视口)：布局视口的一个理想尺寸，只有当布局视口和屏幕设备一样宽（也就是和初始视觉视口一样大），才是理想视口。js获取理想视口，屏幕宽度： window.screen.width 1关于 123456789当写上mete标签后，&#96;&#96;&#96;wdth&#x3D;device-widthi&#96;&#96;&#96;，使得css像素与设备独立像素链接起来（css像素&#x3D;设备独立像素），（开启像素比，因为像素比一开始是和设备独立像素比的和css像素没关系，这里就联系上了css像素）这句话让布局视口的宽度等于了独立设备像素的宽度。不写这句话默认布局视口宽度就为980，写了变375。此时三个视口保持一致。但是视觉视口会被缩放操作改变。太大的元素，视觉视口会尽量的包住你的内容，就会使得虽然元素超出了视觉视口但是不出现滚动条，那么就引入了完美视口的概念。#### 3.4 完美视口 ``` 用来解决太大的元素超过出视觉窗口不出现滚动条的问题 ```width=device-width,initial-scale=1.0```,两者冲突的话，取两者间的较大值 只有这两个操作才能改变布局视口 4. 缩放操作 放大，css像素占据更多的物理像素，放大css像素的面积，视口尺寸变小 缩小，css像素占据更小的物理像素，缩小css像素的面积，视口尺寸变大 用户的操作PC端 影响布局视口移动端 影响视觉视口 系统操作同时影响布局视口和视觉视口 5. 等比问题 没有加name为viewport的meta标签一个相同css像素大小的区域在不同的设备是等比例缩放的,所以在不同的设备上占据的实际物理大小（英寸）不一样 加name为viewport的meta标签一个相同css像素大小的区域在不同的设备是不等比的,在不同的设备上占据的实际物理大小（英寸）是一样的 等比是不是一个必须的需要？（既要等比又要显示效果好）在文字要完美清晰的展示百分百还原设计图的同时使得在不同设备上要等比同时虽然不加mtae标签就已经等比了，但是这种会使得网页在移动端的字体变得很小展示清晰文字—-&gt; 必须加meta标签（不等比）等比—&gt; 适配！！！！（加上meta标签后也得等比）","comments":true,"tags":[{"name":"移动端适配","slug":"移动端适配","permalink":"https://zhoubb96.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/"}]},{"title":"我的第一篇博客","date":"2020-06-08T04:44:40.000Z","path":"2020/06/08/我的第一篇博客/","text":"windows下在node环境利用hexo搭载个人博客一，Git的下载与身份配置 安装Git，下载地址是：https://git-scm.com/ ,可以找速度快的淘宝镜像，下载后安装 使用命令 1git config --global user.name&quot;xxx&quot; 配置用户名 使用命令 1git config --global user.email &quot;xxx@xxx.com&quot; 配置邮箱 二，node的下载 安装Nodejs，下载地址是：https://nodejs.org/ 通过命令1npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org 设置淘宝源，通过命令npm config get registry来检查是否配置成功 通过命令1npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org 安装cnpm，安装后就可以通过 cnpm install xxx来使用cnpm了。 三，hexo框架的下载与使用 全局安装hexo框架，1npm install hexo-cli –g 在任意一个位置创建一个文件夹来存放你的blog项目，在此文件夹下打开终端，输入 hexo init 初始化博客项目 创建文章，hexo n &quot;我的第一篇博客&quot; 安装部署插件，1cnpm install --save hexo-deployer-git 四，博客的预览与部署 下载主题，1git clone git:&#x2F;&#x2F;github.com&#x2F;tommy351&#x2F;hexo-theme-light.git themes&#x2F;light 下载后在_config.yml切换主题1theme: light 本地预览运行，hexo server（可用简写hexo s） 生成静态网页，hexo generate（可用简写hexo g） 新建一个仓库用来部署网页，仓库命名要求为你的昵称如：zhoubb96.github.io复制这个仓库的地址填到deploy的设置repo中修改_config.yml 1234deploy: type: &#39;git&#39; repo: https:&#x2F;&#x2F;github.com&#x2F;zhoubb96&#x2F;zhoubb96.github.io.git branch: masterd 部署到远端，hexo deploy（可用简写hexo d） 每次更新都要重新生成与上传。 许多个性化的设置需要在主题目录或者主目录下的_config.yml进行修改。","comments":true,"tags":[{"name":"博客搭载","slug":"博客搭载","permalink":"https://zhoubb96.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E8%BD%BD/"}]}]